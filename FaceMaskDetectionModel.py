# -*- coding: utf-8 -*-
"""miniproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wyrX5fWj9XSGFjnkptStA9Q_SMtfvWUD
"""

from google.colab import drive
drive.mount('/content/drive/')

!pip install -q keras

import keras

# Commented out IPython magic to ensure Python compatibility.
from tensorflow.keras.preprocessing.image import img_to_array, load_img, ImageDataGenerator
from tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Dropout
from tensorflow.keras.models import Model
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
# %matplotlib inline
import argparse
import os
from imutils import paths

IMAGE_SIZE = [224,224]

test_path = '/content/drive/My Drive/Colab Notebooks/cell/Test'
train_path = '/content/drive/My Drive/Colab Notebooks/cell/Train'

import tensorflow

#setting the images into same size 
train_datagen = ImageDataGenerator(rescale = 1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/cell/Train',target_size=(244,244),batch_size=32,class_mode='categorical')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/cell/Test',target_size=(244,244),batch_size=32,class_mode='categorical')

trainImages = list(paths.list_images('/content/drive/My Drive/Colab Notebooks/cell/Train'))

testImages = list(paths.list_images('/content/drive/My Drive/Colab Notebooks/cell/Test'))

#importing images into file
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
train = []
labels = []
for i in trainImages: 
  label = i.split(os.path.sep)[-2]
  img = load_img(i, target_size = (244, 244), interpolation = "nearest", color_mode = "rgb")
  img = img_to_array(img)
  img = preprocess_input(img)
  train.append(img)
  labels.append(label)

train = np.array(train)
labels = np.array(labels)

from sklearn.preprocessing import LabelBinarizer
from keras.utils.np_utils import to_categorical   
lb = LabelBinarizer()
labels = lb.fit_transform(labels)
labels = to_categorical(labels)

from sklearn.model_selection import train_test_split
X_Train, X_Test, y_train, y_test = train_test_split(train, labels, train_size = 0.75, random_state = 40, stratify = labels)

print(X_Train.shape, X_Test.shape, y_train.shape, y_test.shape)

IDG = ImageDataGenerator(rotation_range = 50, width_shift_range = 0.5, height_shift_range = 0.5, horizontal_flip = True, vertical_flip = True, fill_mode = 'nearest')

from tensorflow.keras.applications import MobileNetV2
base = MobileNetV2(alpha = 1.0, include_top = False, weights = 'imagenet',input_tensor = Input(shape = (224, 224, 3)), classes = 2)

finalModel = base.output
from tensorflow.keras.layers import AveragePooling2D, Dropout, Flatten, Dense
finalModel = AveragePooling2D(pool_size=(7, 7))(finalModel)
finalModel = Flatten(name = "flatten")(finalModel)
finalModel = Dense(128, activation = "relu")(finalModel)
finalModel = Dropout(0.5)(finalModel)
finalModel = Dense(2, activation = "softmax")(finalModel)

model = Model(inputs = base.input, outputs = finalModel)

for layers in base.layers:
  layers.trainable = False

INIT_LR = 1e-4
EPOCHS = 40
BS = 32
from tensorflow.keras.optimizers import Adamax
model.compile(loss = "categorical_crossentropy", optimizer = Adamax(lr = INIT_LR, decay = INIT_LR // EPOCHS), metrics = ["accuracy"])

main = model.fit(IDG.flow(X_Train, y_train, batch_size = BS), validation_data = (X_Test, y_test), validation_steps = len(X_Test) // BS, epochs = EPOCHS, steps_per_epoch = len(X_Train) // BS)

y_pred = model.predict(x = X_Test, batch_size = BS)

y_pred = np.argmax(y_pred, axis=1)

y_test = y_test.argmax(axis = 1)

from sklearn.metrics import r2_score
r_squared = r2_score(y_test, y_pred)

print(r_squared)

model.save('finalversion.h5')

